{"version":3,"sources":["logo.svg","Redux/action.js","Redux/constraint.js","App.js","serviceWorker.js","Redux/reducer.js","Redux/index.js","Redux/sagas.js","index.js"],"names":["module","exports","increment","console","log","type","decrement","connect","counter","global","dispatch","incrementAsync","decrementAsync","className","src","logo","alt","onClick","Boolean","window","location","hostname","match","initialState","combineReducers","state","action","incAsyncSaga","decAsyncSaga","inc","dec","rootSaga","delay","put","actions","takeLatest","all","call","sagaMiddleWare","createSagaMiddleware","store","createStore","redux","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HAAAA,EAAOC,QAAU,IAA0B,kC,mMCE9BC,EAAY,WAGrB,OADAC,QAAQC,IAAI,aACL,CAACC,KCLa,cDOZC,EAAY,WAGrB,OADAH,QAAQC,IAAI,aACL,CAACC,KCTa,cC0DVE,mBAdf,YACE,MAAO,CACLC,QAFiC,EAAVC,OAEPD,YAGpB,SAA2BE,GACzB,MAAO,CACLC,eAAgB,kBAAMD,GFtCtBP,QAAQC,IAAI,aACL,CAACC,KCbmB,sBCmD3BO,eAAgB,kBAAMF,GFlCtBP,QAAQC,IAAI,aACL,CAACC,KCjBmB,sBCmD3BH,UAAW,kBAAMQ,EAASR,MAC1BI,UAAW,kBAAMI,EAASJ,SAIfC,EA/Cf,YAMI,IALFC,EAKC,EALDA,QACAN,EAIC,EAJDA,UACAI,EAGC,EAHDA,UACAK,EAEC,EAFDA,eACAC,EACC,EADDA,eAEA,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,2BACE,4DAEF,4BAAQX,KAAK,SAASY,QAAS,kBAAMf,MAArC,aAGA,4BAAQG,KAAK,SAASY,QAAS,kBAAMN,MAArC,mBAGA,uCACU,8BAAOH,IAEjB,4BAAQH,KAAK,SAASY,QAAS,kBAAMX,MAArC,aAGA,4BAAQD,KAAK,SAASY,QAAS,kBAAML,MAArC,wBC1BYM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBChBAC,EAAe,CACjBf,QAAS,GCAEgB,cAAgB,CAC3Bf,ODCW,WAAmC,IAAlCgB,EAAiC,uDAAzBF,EAAcG,EAAW,uCAE7C,OADAvB,QAAQC,IAAI,iBAAkB,CAACsB,WACxBA,EAAOrB,MACV,IHRiB,YGQD,OAAO,YAAC,eACjBoB,GADS,IAEZjB,QAASiB,EAAMjB,QAAU,IAE7B,IHXiB,YGWD,OAAO,YAAC,eACjBiB,GADS,IAEZjB,QAASiB,EAAMjB,QAAU,IAE7B,QAAS,OAAQiB,M,kCELRE,G,WASAC,G,WAUAC,G,WAGAC,G,WAIQC,GA1BlB,SAAUJ,EAAaD,GAAvB,iEAGH,OAHG,kBAGGM,YAAM,KAHT,OAIH,OAJG,SAIGC,YAAIC,KAJP,8BAMH,OANG,mCAMG/B,QAAQC,IAAR,MANH,qDASA,SAAUwB,EAAaF,GAAvB,iEAGH,OAHG,kBAGGM,YAAM,KAHT,OAIH,OAJG,SAIGC,YAAIC,KAJP,8BAMH,OANG,mCAMG/B,QAAQC,IAAR,MANH,qDAUA,SAAUyB,IAAV,iEACL,OADK,SACCM,YL7BuB,kBK6BKR,GAD7B,uCAGA,SAAUG,IAAV,iEACL,OADK,SACCK,YL/BuB,kBK+BKP,GAD7B,uCAIQ,SAAUG,IAAV,iEACb,OADa,SACPK,YAAI,CAACC,YAAKR,GAAMQ,YAAKP,GAAMO,YAAKV,GAAeU,YAAKT,KAD7C,uC,YCzBTU,EAAiBC,cACjBC,EAAQC,YAAYC,EAAOC,YAAgBL,IACjDA,EAAeM,IAAIb,GAEnBc,IAASC,OACP,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJ6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.94fdf4bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import { INCREMENT, DECREMENT, DECREMENT_VALUE, INCREMENT_VALUE } from './constraint';\r\n\r\nexport const increment = () =>  {\r\n    //api call\r\n    console.log('increment');\r\n    return({type: INCREMENT});\r\n}\r\nexport const decrement = () => {\r\n    //api call\r\n    console.log('decrement');\r\n    return({type: DECREMENT});\r\n}\r\nexport const incrementValue = () =>  {\r\n    //api call\r\n    console.log('increment');\r\n    return({type: INCREMENT_VALUE});\r\n}\r\nexport const decrementValue = () => {\r\n    //api call\r\n    console.log('decrement');\r\n    return({type: DECREMENT_VALUE});\r\n}","export const INCREMENT = 'INCREMENT';\r\nexport const DECREMENT = 'DECREMENT';\r\nexport const INCREMENT_VALUE = 'INCREMENT_VALUE';\r\nexport const DECREMENT_VALUE = 'DECREMENT_VALUE';","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { connect } from \"react-redux\";\r\n// import { INCREMENT_VALUE, DECREMENT_VALUE } from './Redux/constraint';\r\nimport {\r\n  increment,\r\n  decrement,\r\n  incrementValue,\r\n  decrementValue,\r\n} from \"./Redux/action\";\r\n\r\nfunction App({\r\n  counter,\r\n  increment,\r\n  decrement,\r\n  incrementAsync,\r\n  decrementAsync,\r\n}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          <code>REDUX SAGA IMPLEMENTATION</code>\r\n        </p>\r\n        <button type=\"button\" onClick={() => increment()}>\r\n          INCREMENT\r\n        </button>\r\n        <button type=\"button\" onClick={() => incrementAsync()}>\r\n          INCREMENT ASYNC\r\n        </button>\r\n        <h1>\r\n          Counter <code>{counter}</code>\r\n        </h1>\r\n        <button type=\"button\" onClick={() => decrement()}>\r\n          DECREMENT\r\n        </button>\r\n        <button type=\"button\" onClick={() => decrementAsync()}>\r\n          DECREMENT ASYNC\r\n        </button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\nfunction mapStateToProps({ global }) {\r\n  return {\r\n    counter: global.counter,\r\n  };\r\n}\r\nfunction mapDispathToProps(dispatch) {\r\n  return {\r\n    incrementAsync: () => dispatch(incrementValue()),\r\n    decrementAsync: () => dispatch(decrementValue()),\r\n    increment: () => dispatch(increment()),\r\n    decrement: () => dispatch(decrement()),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispathToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nimport { INCREMENT, DECREMENT } from './constraint';\r\nconst initialState = {\r\n    counter: 0\r\n}\r\nexport default (state = initialState, action) => {\r\n    console.log(\"Inside reducer\", {action})\r\n    switch(action.type){\r\n        case INCREMENT: return ({\r\n            ...state,\r\n            counter: state.counter + 1,\r\n        })\r\n        case DECREMENT: return ({\r\n            ...state,\r\n            counter: state.counter - 1,\r\n        })\r\n        default: return (state)\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport reducer from \"./reducer\";\r\n\r\nexport default combineReducers({\r\n    global: reducer\r\n})","import {\r\n  takeLatest,\r\n  all,\r\n  call,\r\n  delay,\r\n  put,\r\n} from \"redux-saga/effects\";\r\nimport { DECREMENT_VALUE, INCREMENT_VALUE } from \"./constraint\";\r\nimport * as actions from \"./action\"\r\n// import { increment, decrement } from \"./action\";\r\n\r\nexport function* incAsyncSaga(action) {\r\n  try {\r\n    //API CALL SIMULATION\r\n    yield delay(1000);\r\n    yield put(actions.increment());\r\n  } catch (err) {\r\n    yield console.log(err);\r\n  }\r\n}\r\nexport function* decAsyncSaga(action) {\r\n  try {\r\n    //API CALL SIMULATION\r\n    yield delay(1000);\r\n    yield put(actions.decrement());\r\n  } catch (err) {\r\n    yield console.log(err);\r\n  }\r\n}\r\n\r\nexport function* inc() {\r\n  yield takeLatest(INCREMENT_VALUE, incAsyncSaga);\r\n}\r\nexport function* dec() {\r\n  yield takeLatest(DECREMENT_VALUE, decAsyncSaga);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([call(inc), call(dec), call(incAsyncSaga), call(decAsyncSaga)]);\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport redux from \"./Redux\";\r\n// import thunk from \"redux-thunk\";\r\nimport rootSaga from \"./Redux/sagas\";\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nconst sagaMiddleWare = createSagaMiddleware();\r\nconst store = createStore(redux, applyMiddleware(sagaMiddleWare));\r\nsagaMiddleWare.run(rootSaga);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App />\r\n    </React.StrictMode>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}